"""A high precision floating point value represented as a string"""
scalar BigFloat

"""
Boolean expression comparing fields on type "BigFloat"
"""
input BigFloatFilter {
  eq: BigFloat
  gt: BigFloat
  gte: BigFloat
  in: [BigFloat!]
  is: FilterIs
  lt: BigFloat
  lte: BigFloat
  neq: BigFloat
}

"""
Boolean expression comparing fields on type "BigFloatList"
"""
input BigFloatListFilter {
  containedBy: [BigFloat!]
  contains: [BigFloat!]
  eq: [BigFloat!]
  is: FilterIs
  overlaps: [BigFloat!]
}

"""An arbitrary size integer represented as a string"""
scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  is: FilterIs
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "BigIntList"
"""
input BigIntListFilter {
  containedBy: [BigInt!]
  contains: [BigInt!]
  eq: [BigInt!]
  is: FilterIs
  overlaps: [BigInt!]
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  is: FilterIs
}

"""
Boolean expression comparing fields on type "BooleanList"
"""
input BooleanListFilter {
  containedBy: [Boolean!]
  contains: [Boolean!]
  eq: [Boolean!]
  is: FilterIs
  overlaps: [Boolean!]
}

type contacts implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: UUID!
  created_at: Datetime!
  organization_id: UUID!
  first_name: String
  last_name: String
  phone_number: String
  email: String
  linkedin: String
  organizations: organizations
}

type contactsConnection {
  edges: [contactsEdge!]!
  pageInfo: PageInfo!
}

type contactsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [contacts!]!
}

type contactsEdge {
  cursor: String!
  node: contacts!
}

input contactsFilter {
  id: UUIDFilter
  created_at: DatetimeFilter
  organization_id: UUIDFilter
  first_name: StringFilter
  last_name: StringFilter
  phone_number: StringFilter
  email: StringFilter
  linkedin: StringFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [contactsFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [contactsFilter!]

  """Negates a filter"""
  not: contactsFilter
}

input contactsInsertInput {
  id: UUID
  created_at: Datetime
  organization_id: UUID
  first_name: String
  last_name: String
  phone_number: String
  email: String
  linkedin: String
}

type contactsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [contacts!]!
}

input contactsOrderBy {
  id: OrderByDirection
  created_at: OrderByDirection
  organization_id: OrderByDirection
  first_name: OrderByDirection
  last_name: OrderByDirection
  phone_number: OrderByDirection
  email: OrderByDirection
  linkedin: OrderByDirection
}

input contactsUpdateInput {
  id: UUID
  created_at: Datetime
  organization_id: UUID
  first_name: String
  last_name: String
  phone_number: String
  email: String
  linkedin: String
}

type contactsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [contacts!]!
}

"""
An opaque string using for tracking a position in results during pagination
"""
scalar Cursor

"""A date wihout time information"""
scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  in: [Date!]
  is: FilterIs
  lt: Date
  lte: Date
  neq: Date
}

"""
Boolean expression comparing fields on type "DateList"
"""
input DateListFilter {
  containedBy: [Date!]
  contains: [Date!]
  eq: [Date!]
  is: FilterIs
  overlaps: [Date!]
}

"""A date and time"""
scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  in: [Datetime!]
  is: FilterIs
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

"""
Boolean expression comparing fields on type "DatetimeList"
"""
input DatetimeListFilter {
  containedBy: [Datetime!]
  contains: [Datetime!]
  eq: [Datetime!]
  is: FilterIs
  overlaps: [Datetime!]
}

enum FilterIs {
  NULL
  NOT_NULL
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: FilterIs
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "FloatList"
"""
input FloatListFilter {
  containedBy: [Float!]
  contains: [Float!]
  eq: [Float!]
  is: FilterIs
  overlaps: [Float!]
}

"""
Boolean expression comparing fields on type "ID"
"""
input IDFilter {
  eq: ID
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: FilterIs
  lt: Int
  lte: Int
  neq: Int
}

"""
Boolean expression comparing fields on type "IntList"
"""
input IntListFilter {
  containedBy: [Int!]
  contains: [Int!]
  eq: [Int!]
  is: FilterIs
  overlaps: [Int!]
}

"""A Javascript Object Notation value serialized as a string"""
scalar JSON

"""The root type for creating and mutating data"""
type Mutation {
  """Deletes zero or more records from the `contacts` collection"""
  deleteFromcontactsCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: contactsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): contactsDeleteResponse!

  """
  Deletes zero or more records from the `organization_members` collection
  """
  deleteFromorganization_membersCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: organization_membersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): organization_membersDeleteResponse!

  """Deletes zero or more records from the `organizations` collection"""
  deleteFromorganizationsCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: organizationsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): organizationsDeleteResponse!

  """Deletes zero or more records from the `users` collection"""
  deleteFromusersCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: usersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): usersDeleteResponse!

  """Adds one or more `contacts` records to the collection"""
  insertIntocontactsCollection(objects: [contactsInsertInput!]!): contactsInsertResponse

  """Adds one or more `organization_members` records to the collection"""
  insertIntoorganization_membersCollection(objects: [organization_membersInsertInput!]!): organization_membersInsertResponse

  """Adds one or more `organizations` records to the collection"""
  insertIntoorganizationsCollection(objects: [organizationsInsertInput!]!): organizationsInsertResponse

  """Adds one or more `users` records to the collection"""
  insertIntousersCollection(objects: [usersInsertInput!]!): usersInsertResponse

  """Updates zero or more records in the `contacts` collection"""
  updatecontactsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: contactsUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: contactsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): contactsUpdateResponse!

  """Updates zero or more records in the `organization_members` collection"""
  updateorganization_membersCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: organization_membersUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: organization_membersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): organization_membersUpdateResponse!

  """Updates zero or more records in the `organizations` collection"""
  updateorganizationsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: organizationsUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: organizationsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): organizationsUpdateResponse!

  """Updates zero or more records in the `users` collection"""
  updateusersCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: usersUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: usersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): usersUpdateResponse!
}

interface Node {
  """Retrieves a record by `ID`"""
  nodeId: ID!
}

"""Any type not handled by the type system"""
scalar Opaque

"""
Boolean expression comparing fields on type "Opaque"
"""
input OpaqueFilter {
  eq: Opaque
  is: FilterIs
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  """Ascending order, nulls first"""
  AscNullsFirst

  """Ascending order, nulls last"""
  AscNullsLast

  """Descending order, nulls first"""
  DescNullsFirst

  """Descending order, nulls last"""
  DescNullsLast
}

type organization_members implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  organization_id: UUID!
  user_id: UUID!
  organizations: organizations
  users: users!
}

type organization_membersConnection {
  edges: [organization_membersEdge!]!
  pageInfo: PageInfo!
}

type organization_membersDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [organization_members!]!
}

type organization_membersEdge {
  cursor: String!
  node: organization_members!
}

input organization_membersFilter {
  organization_id: UUIDFilter
  user_id: UUIDFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [organization_membersFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [organization_membersFilter!]

  """Negates a filter"""
  not: organization_membersFilter
}

input organization_membersInsertInput {
  organization_id: UUID
  user_id: UUID
}

type organization_membersInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [organization_members!]!
}

input organization_membersOrderBy {
  organization_id: OrderByDirection
  user_id: OrderByDirection
}

input organization_membersUpdateInput {
  organization_id: UUID
  user_id: UUID
}

type organization_membersUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [organization_members!]!
}

type organizations implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: UUID!
  owner_id: UUID!
  users: users!
  organization_membersCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: organization_membersFilter

    """Sort order to apply to the collection"""
    orderBy: [organization_membersOrderBy!]
  ): organization_membersConnection
  contactsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: contactsFilter

    """Sort order to apply to the collection"""
    orderBy: [contactsOrderBy!]
  ): contactsConnection
}

type organizationsConnection {
  edges: [organizationsEdge!]!
  pageInfo: PageInfo!
}

type organizationsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [organizations!]!
}

type organizationsEdge {
  cursor: String!
  node: organizations!
}

input organizationsFilter {
  id: UUIDFilter
  owner_id: UUIDFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [organizationsFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [organizationsFilter!]

  """Negates a filter"""
  not: organizationsFilter
}

input organizationsInsertInput {
  id: UUID
  owner_id: UUID
}

type organizationsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [organizations!]!
}

input organizationsOrderBy {
  id: OrderByDirection
  owner_id: OrderByDirection
}

input organizationsUpdateInput {
  id: UUID
  owner_id: UUID
}

type organizationsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [organizations!]!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `contacts`"""
  contactsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: contactsFilter

    """Sort order to apply to the collection"""
    orderBy: [contactsOrderBy!]
  ): contactsConnection

  """Retrieve a record by its `ID`"""
  node(
    """The record's `ID`"""
    nodeId: ID!
  ): Node

  """A pagable collection of type `organization_members`"""
  organization_membersCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: organization_membersFilter

    """Sort order to apply to the collection"""
    orderBy: [organization_membersOrderBy!]
  ): organization_membersConnection

  """A pagable collection of type `organizations`"""
  organizationsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: organizationsFilter

    """Sort order to apply to the collection"""
    orderBy: [organizationsOrderBy!]
  ): organizationsConnection
  organizations_user_is_member: UUID

  """A pagable collection of type `users`"""
  usersCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: usersFilter

    """Sort order to apply to the collection"""
    orderBy: [usersOrderBy!]
  ): usersConnection
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  iregex: String
  is: FilterIs
  like: String
  lt: String
  lte: String
  neq: String
  regex: String
  startsWith: String
}

"""
Boolean expression comparing fields on type "StringList"
"""
input StringListFilter {
  containedBy: [String!]
  contains: [String!]
  eq: [String!]
  is: FilterIs
  overlaps: [String!]
}

"""A time without date information"""
scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  in: [Time!]
  is: FilterIs
  lt: Time
  lte: Time
  neq: Time
}

"""
Boolean expression comparing fields on type "TimeList"
"""
input TimeListFilter {
  containedBy: [Time!]
  contains: [Time!]
  eq: [Time!]
  is: FilterIs
  overlaps: [Time!]
}

type users implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: UUID!
  email: String
  organizationsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: organizationsFilter

    """Sort order to apply to the collection"""
    orderBy: [organizationsOrderBy!]
  ): organizationsConnection
  organization_membersCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: organization_membersFilter

    """Sort order to apply to the collection"""
    orderBy: [organization_membersOrderBy!]
  ): organization_membersConnection
}

type usersConnection {
  edges: [usersEdge!]!
  pageInfo: PageInfo!
}

type usersDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [users!]!
}

type usersEdge {
  cursor: String!
  node: users!
}

input usersFilter {
  id: UUIDFilter
  email: StringFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [usersFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [usersFilter!]

  """Negates a filter"""
  not: usersFilter
}

input usersInsertInput {
  id: UUID
  email: String
}

type usersInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [users!]!
}

input usersOrderBy {
  id: OrderByDirection
  email: OrderByDirection
}

input usersUpdateInput {
  id: UUID
  email: String
}

type usersUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [users!]!
}

"""A universally unique identifier"""
scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  in: [UUID!]
  is: FilterIs
  neq: UUID
}

"""
Boolean expression comparing fields on type "UUIDList"
"""
input UUIDListFilter {
  containedBy: [UUID!]
  contains: [UUID!]
  eq: [UUID!]
  is: FilterIs
  overlaps: [UUID!]
}

